import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.38.4';

export async function deleteUserData(supabase: ReturnType<typeof createClient>, userId: string) {
  console.log('üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ profiles
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ profiles...');
    const { data: profile } = await supabase
      .from('profiles')
      .select('id')
      .eq('id', userId)
      .maybeSingle();

    if (!profile) {
      console.log('‚ÑπÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö');
      return true;
    }

    // 1. –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ children
    console.log('1Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ children...');
    const { error: deleteChildrenError } = await supabase
      .from('children')
      .delete()
      .eq('parent_profile_id', userId);

    if (deleteChildrenError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è children:', deleteChildrenError);
      throw deleteChildrenError;
    }
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ children —É–¥–∞–ª–µ–Ω—ã');

    // 2. –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ parent_profiles
    console.log('2Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ parent_profiles...');
    const { error: deleteParentError } = await supabase
      .from('parent_profiles')
      .delete()
      .eq('user_id', userId);

    if (deleteParentError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è parent_profiles:', deleteParentError);
      throw deleteParentError;
    }
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ parent_profiles —É–¥–∞–ª–µ–Ω—ã');

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ nanny_profiles
    console.log('3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ nanny_profiles...');
    const { data: nannyProfile } = await supabase
      .from('nanny_profiles')
      .select('id')
      .eq('user_id', userId)
      .maybeSingle();

    if (nannyProfile) {
      console.log('üßπ –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –Ω—è–Ω–∏, —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
      
      // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω—è–Ω–µ–π –¥–∞–Ω–Ω—ã–µ
      const tables = [
        'nanny_training',
        'nanny_documents',
        'working_hours',
        'schedule_events',
        'nanny_settings',
        'appointments'
      ];

      for (const table of tables) {
        console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ${table}...`);
        const { error } = await supabase
          .from(table)
          .delete()
          .eq('nanny_id', nannyProfile.id);

        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ ${table}:`, error);
          throw error;
        }
        console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ ${table} —É–¥–∞–ª–µ–Ω—ã`);
      }

      // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω—è–Ω–∏
      console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω—è–Ω–∏...');
      const { error: deleteNannyError } = await supabase
        .from('nanny_profiles')
        .delete()
        .eq('user_id', userId);

      if (deleteNannyError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è nanny_profiles:', deleteNannyError);
        throw deleteNannyError;
      }
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ nanny_profiles —É–¥–∞–ª–µ–Ω—ã');
    }

    // 4. –£–¥–∞–ª—è–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('4Ô∏è‚É£ –£–¥–∞–ª—è–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const { error: deleteRolesError } = await supabase
      .from('user_roles')
      .delete()
      .eq('user_id', userId);

    if (deleteRolesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π:', deleteRolesError);
      throw deleteRolesError;
    }
    console.log('‚úÖ –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω—ã');

    // 5. –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    console.log('5Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å...');
    const { error: deleteProfileError } = await supabase
      .from('profiles')
      .delete()
      .eq('id', userId);

    if (deleteProfileError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', deleteProfileError);
      throw deleteProfileError;
    }
    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω');

    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

export async function createTestUser(supabase: ReturnType<typeof createClient>, testData: {
  email: string;
  firstName: string;
  lastName: string;
  phone: string;
}) {
  console.log('üë§ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', testData);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ auth.users
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ auth.users...');
    const { data: { users }, error: getUserError } = await supabase.auth.admin.listUsers({
      filter: {
        email: testData.email.toLowerCase()
      }
    });

    if (getUserError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ auth.users:', getUserError);
      throw getUserError;
    }

    if (users?.length > 0) {
      console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ auth.users, —É–¥–∞–ª—è–µ–º...');
      const { error: deleteError } = await supabase.auth.admin.deleteUser(users[0].id);
      if (deleteError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ auth.users:', deleteError);
        throw deleteError;
      }
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ auth.users');
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å
    const password = Math.random().toString(36).slice(-8);
    
    console.log('üîë –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Admin API...');
    const { data: newUser, error: createError } = await supabase.auth.admin.createUser({
      email: testData.email.toLowerCase(),
      password: password,
      email_confirm: true,
      user_metadata: {
        first_name: testData.firstName,
        last_name: testData.lastName,
        phone: testData.phone
      },
      app_metadata: {
        provider: 'email',
        providers: ['email']
      }
    });

    if (createError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', createError);
      throw createError;
    }

    if (!newUser?.user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
      throw new Error('User creation failed - no data returned');
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ profiles
    console.log('üìù –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ profiles...');
    const { error: profileError } = await supabase
      .from('profiles')
      .insert({
        id: newUser.user.id,
        first_name: testData.firstName,
        last_name: testData.lastName,
        main_phone: testData.phone
      });

    if (profileError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', profileError);
      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ auth.users –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
      await supabase.auth.admin.deleteUser(newUser.user.id);
      throw profileError;
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', {
      id: newUser.user.id,
      email: newUser.user.email
    });

    return newUser.user;
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    throw error;
  }
}